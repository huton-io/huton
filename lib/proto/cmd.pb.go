// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lib/proto/cmd.proto

package huton_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Command struct {
	Type             *uint32 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	Body             []byte  `protobuf:"bytes,2,req,name=body" json:"body,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Command) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *Command) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type Response struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func init() {
	proto.RegisterType((*Command)(nil), "huton_proto.Command")
	proto.RegisterType((*Response)(nil), "huton_proto.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Reciever service

type RecieverClient interface {
	OnCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
}

type recieverClient struct {
	cc *grpc.ClientConn
}

func NewRecieverClient(cc *grpc.ClientConn) RecieverClient {
	return &recieverClient{cc}
}

func (c *recieverClient) OnCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/huton_proto.Reciever/OnCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Reciever service

type RecieverServer interface {
	OnCommand(context.Context, *Command) (*Response, error)
}

func RegisterRecieverServer(s *grpc.Server, srv RecieverServer) {
	s.RegisterService(&_Reciever_serviceDesc, srv)
}

func _Reciever_OnCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecieverServer).OnCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/huton_proto.Reciever/OnCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecieverServer).OnCommand(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reciever_serviceDesc = grpc.ServiceDesc{
	ServiceName: "huton_proto.Reciever",
	HandlerType: (*RecieverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnCommand",
			Handler:    _Reciever_OnCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lib/proto/cmd.proto",
}

func init() { proto.RegisterFile("lib/proto/cmd.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xce, 0xc9, 0x4c, 0xd2,
	0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x4f, 0xce, 0x4d, 0xd1, 0x03, 0xb3, 0x84, 0xb8, 0x33, 0x4a,
	0x4b, 0xf2, 0xf3, 0xe2, 0xc1, 0x1c, 0x25, 0x43, 0x2e, 0x76, 0xe7, 0xfc, 0xdc, 0xdc, 0xc4, 0xbc,
	0x14, 0x21, 0x21, 0x2e, 0x96, 0x92, 0xca, 0x82, 0x54, 0x09, 0x46, 0x05, 0x26, 0x0d, 0xde, 0x20,
	0x30, 0x1b, 0x24, 0x96, 0x94, 0x9f, 0x52, 0x29, 0xc1, 0xa4, 0xc0, 0xa4, 0xc1, 0x13, 0x04, 0x66,
	0x2b, 0x71, 0x71, 0x71, 0x04, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x1a, 0xb9, 0x81, 0xd8,
	0xc9, 0x99, 0xa9, 0x65, 0xa9, 0x45, 0x42, 0x56, 0x5c, 0x9c, 0xfe, 0x79, 0x30, 0xc3, 0x44, 0xf4,
	0x90, 0x6c, 0xd1, 0x83, 0x8a, 0x4a, 0x89, 0xa2, 0x88, 0xc2, 0x4c, 0x51, 0x62, 0x00, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x3a, 0x32, 0x89, 0xd1, 0xa9, 0x00, 0x00, 0x00,
}
